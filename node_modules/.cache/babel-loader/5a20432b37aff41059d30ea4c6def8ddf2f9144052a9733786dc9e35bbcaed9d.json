{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\my-react-app\\\\src\\\\List.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './List.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  listTitle = \"My List\",\n  placeholderText = \"Put top goals here\",\n  buttonLabel = \"Add\",\n  Listdescriptin = \"This is my list of goals.\",\n  clearButtonLabel = \"Clear List\",\n  emptyInputAlert = \"Textbox cannot be empty!\",\n  emptyListAlert = \"There are no items to clear!\"\n}) => {\n  _s();\n  const [items, setItems] = useState([]);\n  const listInput = useRef(null);\n  const listRef = useRef(null);\n  useEffect(() => {\n    console.log(\"ðŸŸ¡ List updated:\", items);\n    if (listRef.current) {\n      listRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [items]);\n  const handleAdd = () => {\n    const value = listInput.current.value.trim();\n    if (!value) {\n      alert(emptyInputAlert);\n      return;\n    }\n    setItems([...items, value]);\n    listInput.current.value = '';\n    listInput.current.focus();\n  };\n  const handleClear = () => {\n    if (items.length === 0) {\n      alert(emptyListAlert);\n      return;\n    }\n    setItems([]);\n    listInput.current.value = '';\n    listInput.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: listTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: listInput,\n      placeholder: placeholderText,\n      className: \"inputData\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAdd,\n      className: \"AddButton\",\n      children: buttonLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      className: \"removeBotton\",\n      children: clearButtonLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: Listdescriptin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      ref: listRef,\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 1\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 1\n  }, this);\n};\n_s(List, \"5qOyMA/siubg5Co9HEqNw60HHK0=\");\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","List","listTitle","placeholderText","buttonLabel","Listdescriptin","clearButtonLabel","emptyInputAlert","emptyListAlert","_s","items","setItems","listInput","listRef","console","log","current","scrollIntoView","behavior","handleAdd","value","trim","alert","focus","handleClear","length","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","placeholder","className","onClick","map","item","i","_c","$RefreshReg$"],"sources":["C:/react/my-react-app/src/List.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './List.css';\r\n\r\nconst List = ({\r\nlistTitle = \"My List\",\r\nplaceholderText = \"Put top goals here\",\r\nbuttonLabel = \"Add\",\r\nListdescriptin = \"This is my list of goals.\",\r\nclearButtonLabel = \"Clear List\",\r\nemptyInputAlert = \"Textbox cannot be empty!\",\r\nemptyListAlert = \"There are no items to clear!\",\r\n}) => {\r\nconst [items, setItems] = useState([]);\r\nconst listInput = useRef(null);\r\nconst listRef = useRef(null);\r\n\r\nuseEffect(() => {\r\nconsole.log(\"ðŸŸ¡ List updated:\", items);\r\n\r\nif (listRef.current) {\r\nlistRef.current.scrollIntoView({ behavior: 'smooth' });\r\n}\r\n}, [items]);\r\n\r\nconst handleAdd = () => {\r\nconst value = listInput.current.value.trim();\r\nif (!value) {\r\nalert(emptyInputAlert);\r\nreturn;\r\n}\r\nsetItems([...items, value]);\r\nlistInput.current.value = '';\r\nlistInput.current.focus();\r\n};\r\n\r\nconst handleClear = () => {\r\nif (items.length === 0) {\r\nalert(emptyListAlert);\r\nreturn;\r\n}\r\nsetItems([]);\r\nlistInput.current.value = '';\r\nlistInput.current.focus();\r\n};\r\n\r\nreturn (\r\n<div>\r\n<h3>{listTitle}</h3>\r\n<input type=\"text\" ref={listInput} placeholder={placeholderText} className='inputData' />\r\n<button onClick={handleAdd} className='AddButton'>{buttonLabel}</button>\r\n<button onClick={handleClear} className='removeBotton'>{clearButtonLabel}</button>\r\n<p>{Listdescriptin}</p>\r\n<ul ref={listRef}>\r\n{items.map((item, i) => (\r\n<li key={i}>{item}</li>\r\n))}\r\n</ul>\r\n</div>\r\n);\r\n};\r\n\r\nexport default List;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}