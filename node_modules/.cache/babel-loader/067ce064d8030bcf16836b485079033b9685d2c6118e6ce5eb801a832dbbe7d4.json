{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useGoalTimer = (initialTime = 0) => {\n  _s();\n  const [time, setTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(false);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning && time > 0) {\n      intervalId = setInterval(() => {\n        setTime(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (time === 0) {\n      setIsRunning(false);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isRunning, time]);\n  const startTimer = duration => {\n    setTime(duration);\n    setIsRunning(true);\n  };\n  const pauseTimer = () => {\n    setIsRunning(false);\n  };\n  const resetTimer = () => {\n    setTime(initialTime);\n    setIsRunning(false);\n  };\n  return {\n    time,\n    isRunning,\n    startTimer,\n    pauseTimer,\n    resetTimer\n  };\n};\n_s(useGoalTimer, \"96W7iGvL7aMjZ8eQqy2rMySZu7I=\");\nexport default useGoalTimer;","map":{"version":3,"names":["useState","useEffect","useGoalTimer","initialTime","_s","time","setTime","isRunning","setIsRunning","intervalId","setInterval","prevTime","clearInterval","startTimer","duration","pauseTimer","resetTimer"],"sources":["C:/react/my-react-app/src/hooks/useGoalTimer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useGoalTimer = (initialTime = 0) => {\n  const [time, setTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    let intervalId;\n    if (isRunning && time > 0) {\n      intervalId = setInterval(() => {\n        setTime(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (time === 0) {\n      setIsRunning(false);\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isRunning, time]);\n\n  const startTimer = (duration) => {\n    setTime(duration);\n    setIsRunning(true);\n  };\n\n  const pauseTimer = () => {\n    setIsRunning(false);\n  };\n\n  const resetTimer = () => {\n    setTime(initialTime);\n    setIsRunning(false);\n  };\n\n  return {\n    time,\n    isRunning,\n    startTimer,\n    pauseTimer,\n    resetTimer\n  };\n};\n\nexport default useGoalTimer; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAGA,CAACC,WAAW,GAAG,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAACG,WAAW,CAAC;EAC7C,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAIQ,UAAU;IACd,IAAIF,SAAS,IAAIF,IAAI,GAAG,CAAC,EAAE;MACzBI,UAAU,GAAGC,WAAW,CAAC,MAAM;QAC7BJ,OAAO,CAACK,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MACnC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIN,IAAI,KAAK,CAAC,EAAE;MACrBG,YAAY,CAAC,KAAK,CAAC;IACrB;IAEA,OAAO,MAAM;MACX,IAAIC,UAAU,EAAE;QACdG,aAAa,CAACH,UAAU,CAAC;MAC3B;IACF,CAAC;EACH,CAAC,EAAE,CAACF,SAAS,EAAEF,IAAI,CAAC,CAAC;EAErB,MAAMQ,UAAU,GAAIC,QAAQ,IAAK;IAC/BR,OAAO,CAACQ,QAAQ,CAAC;IACjBN,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvBP,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACvBV,OAAO,CAACH,WAAW,CAAC;IACpBK,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,OAAO;IACLH,IAAI;IACJE,SAAS;IACTM,UAAU;IACVE,UAAU;IACVC;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CA1CIF,YAAY;AA4ClB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}